// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardTracker extends ethereum.SmartContract {
  static bind(address: Address): RewardTracker {
    return new RewardTracker("RewardTracker", address);
  }

  BASIS_POINTS_DIVISOR(): BigInt {
    let result = super.call(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BASIS_POINTS_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowances",
      "allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowances(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowances",
      "allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  averageStakedAmounts(param0: Address): BigInt {
    let result = super.call(
      "averageStakedAmounts",
      "averageStakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_averageStakedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "averageStakedAmounts",
      "averageStakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(_receiver: Address): BigInt {
    let result = super.call("claim", "claim(address):(uint256)", [
      ethereum.Value.fromAddress(_receiver),
    ]);

    return result[0].toBigInt();
  }

  try_claim(_receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(address):(uint256)", [
      ethereum.Value.fromAddress(_receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimForAccount(_account: Address, _receiver: Address): BigInt {
    let result = super.call(
      "claimForAccount",
      "claimForAccount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimForAccount(
    _account: Address,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimForAccount",
      "claimForAccount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable(_account: Address): BigInt {
    let result = super.call("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(_account),
    ]);

    return result[0].toBigInt();
  }

  try_claimable(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(_account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableReward(param0: Address): BigInt {
    let result = super.call(
      "claimableReward",
      "claimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_claimableReward(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableReward",
      "claimableReward(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeRewardPerToken(): BigInt {
    let result = super.call(
      "cumulativeRewardPerToken",
      "cumulativeRewardPerToken():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_cumulativeRewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeRewardPerToken",
      "cumulativeRewardPerToken():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeRewards(param0: Address): BigInt {
    let result = super.call(
      "cumulativeRewards",
      "cumulativeRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_cumulativeRewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeRewards",
      "cumulativeRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  depositBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "depositBalances",
      "depositBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_depositBalances(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositBalances",
      "depositBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributor(): Address {
    let result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inPrivateClaimingMode(): boolean {
    let result = super.call(
      "inPrivateClaimingMode",
      "inPrivateClaimingMode():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_inPrivateClaimingMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "inPrivateClaimingMode",
      "inPrivateClaimingMode():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  inPrivateStakingMode(): boolean {
    let result = super.call(
      "inPrivateStakingMode",
      "inPrivateStakingMode():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_inPrivateStakingMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "inPrivateStakingMode",
      "inPrivateStakingMode():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  inPrivateTransferMode(): boolean {
    let result = super.call(
      "inPrivateTransferMode",
      "inPrivateTransferMode():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_inPrivateTransferMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "inPrivateTransferMode",
      "inPrivateTransferMode():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDepositToken(param0: Address): boolean {
    let result = super.call(
      "isDepositToken",
      "isDepositToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isDepositToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDepositToken",
      "isDepositToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isHandler(param0: Address): boolean {
    let result = super.call("isHandler", "isHandler(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isHandler(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isHandler", "isHandler(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  previousCumulatedRewardPerToken(param0: Address): BigInt {
    let result = super.call(
      "previousCumulatedRewardPerToken",
      "previousCumulatedRewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_previousCumulatedRewardPerToken(
    param0: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousCumulatedRewardPerToken",
      "previousCumulatedRewardPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedAmounts(param0: Address): BigInt {
    let result = super.call(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedAmounts",
      "stakedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensPerInterval(): BigInt {
    let result = super.call(
      "tokensPerInterval",
      "tokensPerInterval():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_tokensPerInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensPerInterval",
      "tokensPerInterval():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositSupply(param0: Address): BigInt {
    let result = super.call(
      "totalDepositSupply",
      "totalDepositSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_totalDepositSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositSupply",
      "totalDepositSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_recipient: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    _recipient: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt,
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimForAccountCall extends ethereum.Call {
  get inputs(): ClaimForAccountCall__Inputs {
    return new ClaimForAccountCall__Inputs(this);
  }

  get outputs(): ClaimForAccountCall__Outputs {
    return new ClaimForAccountCall__Outputs(this);
  }
}

export class ClaimForAccountCall__Inputs {
  _call: ClaimForAccountCall;

  constructor(call: ClaimForAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimForAccountCall__Outputs {
  _call: ClaimForAccountCall;

  constructor(call: ClaimForAccountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _depositTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _distributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetDepositTokenCall extends ethereum.Call {
  get inputs(): SetDepositTokenCall__Inputs {
    return new SetDepositTokenCall__Inputs(this);
  }

  get outputs(): SetDepositTokenCall__Outputs {
    return new SetDepositTokenCall__Outputs(this);
  }
}

export class SetDepositTokenCall__Inputs {
  _call: SetDepositTokenCall;

  constructor(call: SetDepositTokenCall) {
    this._call = call;
  }

  get _depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isDepositToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetDepositTokenCall__Outputs {
  _call: SetDepositTokenCall;

  constructor(call: SetDepositTokenCall) {
    this._call = call;
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SetHandlerCall extends ethereum.Call {
  get inputs(): SetHandlerCall__Inputs {
    return new SetHandlerCall__Inputs(this);
  }

  get outputs(): SetHandlerCall__Outputs {
    return new SetHandlerCall__Outputs(this);
  }
}

export class SetHandlerCall__Inputs {
  _call: SetHandlerCall;

  constructor(call: SetHandlerCall) {
    this._call = call;
  }

  get _handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetHandlerCall__Outputs {
  _call: SetHandlerCall;

  constructor(call: SetHandlerCall) {
    this._call = call;
  }
}

export class SetInPrivateClaimingModeCall extends ethereum.Call {
  get inputs(): SetInPrivateClaimingModeCall__Inputs {
    return new SetInPrivateClaimingModeCall__Inputs(this);
  }

  get outputs(): SetInPrivateClaimingModeCall__Outputs {
    return new SetInPrivateClaimingModeCall__Outputs(this);
  }
}

export class SetInPrivateClaimingModeCall__Inputs {
  _call: SetInPrivateClaimingModeCall;

  constructor(call: SetInPrivateClaimingModeCall) {
    this._call = call;
  }

  get _inPrivateClaimingMode(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetInPrivateClaimingModeCall__Outputs {
  _call: SetInPrivateClaimingModeCall;

  constructor(call: SetInPrivateClaimingModeCall) {
    this._call = call;
  }
}

export class SetInPrivateStakingModeCall extends ethereum.Call {
  get inputs(): SetInPrivateStakingModeCall__Inputs {
    return new SetInPrivateStakingModeCall__Inputs(this);
  }

  get outputs(): SetInPrivateStakingModeCall__Outputs {
    return new SetInPrivateStakingModeCall__Outputs(this);
  }
}

export class SetInPrivateStakingModeCall__Inputs {
  _call: SetInPrivateStakingModeCall;

  constructor(call: SetInPrivateStakingModeCall) {
    this._call = call;
  }

  get _inPrivateStakingMode(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetInPrivateStakingModeCall__Outputs {
  _call: SetInPrivateStakingModeCall;

  constructor(call: SetInPrivateStakingModeCall) {
    this._call = call;
  }
}

export class SetInPrivateTransferModeCall extends ethereum.Call {
  get inputs(): SetInPrivateTransferModeCall__Inputs {
    return new SetInPrivateTransferModeCall__Inputs(this);
  }

  get outputs(): SetInPrivateTransferModeCall__Outputs {
    return new SetInPrivateTransferModeCall__Outputs(this);
  }
}

export class SetInPrivateTransferModeCall__Inputs {
  _call: SetInPrivateTransferModeCall;

  constructor(call: SetInPrivateTransferModeCall) {
    this._call = call;
  }

  get _inPrivateTransferMode(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetInPrivateTransferModeCall__Outputs {
  _call: SetInPrivateTransferModeCall;

  constructor(call: SetInPrivateTransferModeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForAccountCall extends ethereum.Call {
  get inputs(): StakeForAccountCall__Inputs {
    return new StakeForAccountCall__Inputs(this);
  }

  get outputs(): StakeForAccountCall__Outputs {
    return new StakeForAccountCall__Outputs(this);
  }
}

export class StakeForAccountCall__Inputs {
  _call: StakeForAccountCall;

  constructor(call: StakeForAccountCall) {
    this._call = call;
  }

  get _fundingAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _depositToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class StakeForAccountCall__Outputs {
  _call: StakeForAccountCall;

  constructor(call: StakeForAccountCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeForAccountCall extends ethereum.Call {
  get inputs(): UnstakeForAccountCall__Inputs {
    return new UnstakeForAccountCall__Inputs(this);
  }

  get outputs(): UnstakeForAccountCall__Outputs {
    return new UnstakeForAccountCall__Outputs(this);
  }
}

export class UnstakeForAccountCall__Inputs {
  _call: UnstakeForAccountCall;

  constructor(call: UnstakeForAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _depositToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UnstakeForAccountCall__Outputs {
  _call: UnstakeForAccountCall;

  constructor(call: UnstakeForAccountCall) {
    this._call = call;
  }
}

export class UpdateRewardsCall extends ethereum.Call {
  get inputs(): UpdateRewardsCall__Inputs {
    return new UpdateRewardsCall__Inputs(this);
  }

  get outputs(): UpdateRewardsCall__Outputs {
    return new UpdateRewardsCall__Outputs(this);
  }
}

export class UpdateRewardsCall__Inputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }
}

export class UpdateRewardsCall__Outputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
