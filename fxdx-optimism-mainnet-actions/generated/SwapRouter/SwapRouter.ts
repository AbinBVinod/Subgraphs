// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CancelSwap extends ethereum.Event {
  get params(): CancelSwap__Params {
    return new CancelSwap__Params(this);
  }
}

export class CancelSwap__Params {
  _event: CancelSwap;

  constructor(event: CancelSwap) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get path(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get acceptableRatio(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get executionFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get blockGap(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get timeGap(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class CreateSwap extends ethereum.Event {
  get params(): CreateSwap__Params {
    return new CreateSwap__Params(this);
  }
}

export class CreateSwap__Params {
  _event: CreateSwap;

  constructor(event: CreateSwap) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get path(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get acceptableRatio(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get executionFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get blockTime(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class ExecuteSwap extends ethereum.Event {
  get params(): ExecuteSwap__Params {
    return new ExecuteSwap__Params(this);
  }
}

export class ExecuteSwap__Params {
  _event: ExecuteSwap;

  constructor(event: ExecuteSwap) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get path(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get acceptableRatio(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get executionFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get blockGap(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get timeGap(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class SetAdmin extends ethereum.Event {
  get params(): SetAdmin__Params {
    return new SetAdmin__Params(this);
  }
}

export class SetAdmin__Params {
  _event: SetAdmin;

  constructor(event: SetAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDelayValues extends ethereum.Event {
  get params(): SetDelayValues__Params {
    return new SetDelayValues__Params(this);
  }
}

export class SetDelayValues__Params {
  _event: SetDelayValues;

  constructor(event: SetDelayValues) {
    this._event = event;
  }

  get minBlockDelayKeeper(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minTimeDelayPublic(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxTimeDelay(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetMinExecutionFee extends ethereum.Event {
  get params(): SetMinExecutionFee__Params {
    return new SetMinExecutionFee__Params(this);
  }
}

export class SetMinExecutionFee__Params {
  _event: SetMinExecutionFee;

  constructor(event: SetMinExecutionFee) {
    this._event = event;
  }

  get minExecutionFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetRequestKeeper extends ethereum.Event {
  get params(): SetRequestKeeper__Params {
    return new SetRequestKeeper__Params(this);
  }
}

export class SetRequestKeeper__Params {
  _event: SetRequestKeeper;

  constructor(event: SetRequestKeeper) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetRequestKeysStartValue extends ethereum.Event {
  get params(): SetRequestKeysStartValue__Params {
    return new SetRequestKeysStartValue__Params(this);
  }
}

export class SetRequestKeysStartValue__Params {
  _event: SetRequestKeysStartValue;

  constructor(event: SetRequestKeysStartValue) {
    this._event = event;
  }

  get swapRequestKeysStart(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SwapRouter__getRequestQueueLengthsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SwapRouter__swapRequestsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getAmountIn(): BigInt {
    return this.value1;
  }

  getMinOut(): BigInt {
    return this.value2;
  }

  getReceiver(): Address {
    return this.value3;
  }

  getAcceptableRatio(): BigInt {
    return this.value4;
  }

  getExecutionFee(): BigInt {
    return this.value5;
  }

  getBlockNumber(): BigInt {
    return this.value6;
  }

  getBlockTime(): BigInt {
    return this.value7;
  }

  getIsETHIn(): boolean {
    return this.value8;
  }

  getIsETHOut(): boolean {
    return this.value9;
  }
}

export class SwapRouter extends ethereum.SmartContract {
  static bind(address: Address): SwapRouter {
    return new SwapRouter("SwapRouter", address);
  }

  PRICE_PRECISION(): BigInt {
    let result = super.call(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PRICE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cancelSwap(_key: Bytes, _executionFeeReceiver: Address): boolean {
    let result = super.call(
      "cancelSwap",
      "cancelSwap(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromAddress(_executionFeeReceiver),
      ],
    );

    return result[0].toBoolean();
  }

  try_cancelSwap(
    _key: Bytes,
    _executionFeeReceiver: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelSwap",
      "cancelSwap(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromAddress(_executionFeeReceiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  executeSwap(_key: Bytes, _executionFeeReceiver: Address): boolean {
    let result = super.call(
      "executeSwap",
      "executeSwap(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromAddress(_executionFeeReceiver),
      ],
    );

    return result[0].toBoolean();
  }

  try_executeSwap(
    _key: Bytes,
    _executionFeeReceiver: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "executeSwap",
      "executeSwap(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromAddress(_executionFeeReceiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRequestKey(_account: Address, _index: BigInt): Bytes {
    let result = super.call(
      "getRequestKey",
      "getRequestKey(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_index),
      ],
    );

    return result[0].toBytes();
  }

  try_getRequestKey(
    _account: Address,
    _index: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRequestKey",
      "getRequestKey(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRequestQueueLengths(): SwapRouter__getRequestQueueLengthsResult {
    let result = super.call(
      "getRequestQueueLengths",
      "getRequestQueueLengths():(uint256,uint256)",
      [],
    );

    return new SwapRouter__getRequestQueueLengthsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getRequestQueueLengths(): ethereum.CallResult<SwapRouter__getRequestQueueLengthsResult> {
    let result = super.tryCall(
      "getRequestQueueLengths",
      "getRequestQueueLengths():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapRouter__getRequestQueueLengthsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getSwapRequestPath(_key: Bytes): Array<Address> {
    let result = super.call(
      "getSwapRequestPath",
      "getSwapRequestPath(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_key)],
    );

    return result[0].toAddressArray();
  }

  try_getSwapRequestPath(_key: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSwapRequestPath",
      "getSwapRequestPath(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRequestKeeper(param0: Address): boolean {
    let result = super.call(
      "isRequestKeeper",
      "isRequestKeeper(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isRequestKeeper(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRequestKeeper",
      "isRequestKeeper(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTimeDelay(): BigInt {
    let result = super.call("maxTimeDelay", "maxTimeDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTimeDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTimeDelay", "maxTimeDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBlockDelayKeeper(): BigInt {
    let result = super.call(
      "minBlockDelayKeeper",
      "minBlockDelayKeeper():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minBlockDelayKeeper(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBlockDelayKeeper",
      "minBlockDelayKeeper():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minExecutionFee(): BigInt {
    let result = super.call(
      "minExecutionFee",
      "minExecutionFee():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minExecutionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minExecutionFee",
      "minExecutionFee():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minTimeDelayPublic(): BigInt {
    let result = super.call(
      "minTimeDelayPublic",
      "minTimeDelayPublic():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minTimeDelayPublic(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minTimeDelayPublic",
      "minTimeDelayPublic():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapRequestKeys(param0: BigInt): Bytes {
    let result = super.call(
      "swapRequestKeys",
      "swapRequestKeys(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBytes();
  }

  try_swapRequestKeys(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "swapRequestKeys",
      "swapRequestKeys(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  swapRequestKeysStart(): BigInt {
    let result = super.call(
      "swapRequestKeysStart",
      "swapRequestKeysStart():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_swapRequestKeysStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapRequestKeysStart",
      "swapRequestKeysStart():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapRequests(param0: Bytes): SwapRouter__swapRequestsResult {
    let result = super.call(
      "swapRequests",
      "swapRequests(bytes32):(address,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new SwapRouter__swapRequestsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
    );
  }

  try_swapRequests(
    param0: Bytes,
  ): ethereum.CallResult<SwapRouter__swapRequestsResult> {
    let result = super.tryCall(
      "swapRequests",
      "swapRequests(bytes32):(address,uint256,uint256,address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapRouter__swapRequestsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
      ),
    );
  }

  swapsIndex(param0: Address): BigInt {
    let result = super.call("swapsIndex", "swapsIndex(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_swapsIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapsIndex", "swapsIndex(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minExecutionFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CancelSwapCall extends ethereum.Call {
  get inputs(): CancelSwapCall__Inputs {
    return new CancelSwapCall__Inputs(this);
  }

  get outputs(): CancelSwapCall__Outputs {
    return new CancelSwapCall__Outputs(this);
  }
}

export class CancelSwapCall__Inputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _executionFeeReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CancelSwapCall__Outputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateSwapCall extends ethereum.Call {
  get inputs(): CreateSwapCall__Inputs {
    return new CreateSwapCall__Inputs(this);
  }

  get outputs(): CreateSwapCall__Outputs {
    return new CreateSwapCall__Outputs(this);
  }
}

export class CreateSwapCall__Inputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _acceptableRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _executionFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _isETHOut(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class CreateSwapCall__Outputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }
}

export class CreateSwapETHToTokensCall extends ethereum.Call {
  get inputs(): CreateSwapETHToTokensCall__Inputs {
    return new CreateSwapETHToTokensCall__Inputs(this);
  }

  get outputs(): CreateSwapETHToTokensCall__Outputs {
    return new CreateSwapETHToTokensCall__Outputs(this);
  }
}

export class CreateSwapETHToTokensCall__Inputs {
  _call: CreateSwapETHToTokensCall;

  constructor(call: CreateSwapETHToTokensCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _acceptableRatio(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _executionFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateSwapETHToTokensCall__Outputs {
  _call: CreateSwapETHToTokensCall;

  constructor(call: CreateSwapETHToTokensCall) {
    this._call = call;
  }
}

export class ExecuteSwapCall extends ethereum.Call {
  get inputs(): ExecuteSwapCall__Inputs {
    return new ExecuteSwapCall__Inputs(this);
  }

  get outputs(): ExecuteSwapCall__Outputs {
    return new ExecuteSwapCall__Outputs(this);
  }
}

export class ExecuteSwapCall__Inputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _executionFeeReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExecuteSwapCall__Outputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteSwapsCall extends ethereum.Call {
  get inputs(): ExecuteSwapsCall__Inputs {
    return new ExecuteSwapsCall__Inputs(this);
  }

  get outputs(): ExecuteSwapsCall__Outputs {
    return new ExecuteSwapsCall__Outputs(this);
  }
}

export class ExecuteSwapsCall__Inputs {
  _call: ExecuteSwapsCall;

  constructor(call: ExecuteSwapsCall) {
    this._call = call;
  }

  get _endIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _executionFeeReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExecuteSwapsCall__Outputs {
  _call: ExecuteSwapsCall;

  constructor(call: ExecuteSwapsCall) {
    this._call = call;
  }
}

export class SendValueCall extends ethereum.Call {
  get inputs(): SendValueCall__Inputs {
    return new SendValueCall__Inputs(this);
  }

  get outputs(): SendValueCall__Outputs {
    return new SendValueCall__Outputs(this);
  }
}

export class SendValueCall__Inputs {
  _call: SendValueCall;

  constructor(call: SendValueCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SendValueCall__Outputs {
  _call: SendValueCall;

  constructor(call: SendValueCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SetDelayValuesCall extends ethereum.Call {
  get inputs(): SetDelayValuesCall__Inputs {
    return new SetDelayValuesCall__Inputs(this);
  }

  get outputs(): SetDelayValuesCall__Outputs {
    return new SetDelayValuesCall__Outputs(this);
  }
}

export class SetDelayValuesCall__Inputs {
  _call: SetDelayValuesCall;

  constructor(call: SetDelayValuesCall) {
    this._call = call;
  }

  get _minBlockDelayKeeper(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minTimeDelayPublic(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxTimeDelay(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDelayValuesCall__Outputs {
  _call: SetDelayValuesCall;

  constructor(call: SetDelayValuesCall) {
    this._call = call;
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SetMinExecutionFeeCall extends ethereum.Call {
  get inputs(): SetMinExecutionFeeCall__Inputs {
    return new SetMinExecutionFeeCall__Inputs(this);
  }

  get outputs(): SetMinExecutionFeeCall__Outputs {
    return new SetMinExecutionFeeCall__Outputs(this);
  }
}

export class SetMinExecutionFeeCall__Inputs {
  _call: SetMinExecutionFeeCall;

  constructor(call: SetMinExecutionFeeCall) {
    this._call = call;
  }

  get _minExecutionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinExecutionFeeCall__Outputs {
  _call: SetMinExecutionFeeCall;

  constructor(call: SetMinExecutionFeeCall) {
    this._call = call;
  }
}

export class SetRequestKeeperCall extends ethereum.Call {
  get inputs(): SetRequestKeeperCall__Inputs {
    return new SetRequestKeeperCall__Inputs(this);
  }

  get outputs(): SetRequestKeeperCall__Outputs {
    return new SetRequestKeeperCall__Outputs(this);
  }
}

export class SetRequestKeeperCall__Inputs {
  _call: SetRequestKeeperCall;

  constructor(call: SetRequestKeeperCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRequestKeeperCall__Outputs {
  _call: SetRequestKeeperCall;

  constructor(call: SetRequestKeeperCall) {
    this._call = call;
  }
}

export class SetRequestKeysStartValueCall extends ethereum.Call {
  get inputs(): SetRequestKeysStartValueCall__Inputs {
    return new SetRequestKeysStartValueCall__Inputs(this);
  }

  get outputs(): SetRequestKeysStartValueCall__Outputs {
    return new SetRequestKeysStartValueCall__Outputs(this);
  }
}

export class SetRequestKeysStartValueCall__Inputs {
  _call: SetRequestKeysStartValueCall;

  constructor(call: SetRequestKeysStartValueCall) {
    this._call = call;
  }

  get _swapRequestKeysStart(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRequestKeysStartValueCall__Outputs {
  _call: SetRequestKeysStartValueCall;

  constructor(call: SetRequestKeysStartValueCall) {
    this._call = call;
  }
}
