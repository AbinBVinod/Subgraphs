enum ActionType {
  trade
  liquidity
  reward
}

enum RewardActionType {
  distribute
  claim
}

type Action @entity {
  id: ID!

  blockNumber: Int!
  params: String!
  txhash: String!
  action: String!
  type: ActionType!
  account: String!
  timestamp: Int!
}

type RewardAction @entity {
  id: ID!

  blockNumber: Int!
  type: RewardActionType!
  account: String!
  timestamp: Int!
  txhash: String!

  fxdx: BigInt!
  bnFxdx: BigInt!
  esFxdx: BigInt!
  fee: BigInt!
}

enum Period {
  hourly
  daily
  weekly
  total
}

type RewardsStat @entity {
  id: ID!

  account: String!

  fxdx: BigInt!
  bnFxdx: BigInt!
  esFxdx: BigInt!
  fee: BigInt!

  timestamp: Int!
  period: Period!
}

type Price @entity {
  id: ID!
  price: BigInt!
  timestamp: Int!
}

type TokenSwapAction @entity {
  id: ID!
  token: String!
  price: BigInt!
  amount: BigInt!
  isIn: Boolean!

  timestamp: Int!
}

enum LeverageActionType {
  increaseLong
  increaseShort
  decreaseLong
  decreaseShort
  liquidatePartialLong
  liquidatePartialShort
  liquidateFullLong
  liquidateFullShort
}

type TokenLeverageAction @entity {
  id: ID!
  token: String!
  price: BigInt!
  sizeDelta: BigInt!
  type: LeverageActionType!

  timestamp: Int!
}

type UserTradesStat @entity {
  id: ID!

  account: String!

  swapVolume: BigInt!
  marginVolume: BigInt!
  liquidationVolume: BigInt!
  mintVolume: BigInt!
  burnVolume: BigInt!

  swapFees: BigInt!
  marginFees: BigInt!
  liquidationFees: BigInt!
  mintFees: BigInt!
  burnFees: BigInt!
  
  netPnl: BigInt!

  lastActiveAt: Int!

  timestamp: Int!
  period: Period!
}

type RecentSwap @entity {
  id: ID!

  volume: BigInt!
  fee: BigInt!
}

type RecentPnl @entity {
  id: ID!

  hasProfit: Boolean!
  delta: BigInt!
}

type RecentPositionTradeFees @entity {
  id: ID!

  fee: BigInt!
}

type UserFlpStat @entity {
  id: ID!

  account: String!

  boughtFlp: BigInt!
  usdSpentForBuy: BigInt!
  soldFlp: BigInt!
  usdReceivedForSell: BigInt!

  timestamp: Int!
  period: Period! 
}